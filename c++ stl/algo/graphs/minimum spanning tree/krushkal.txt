#include<bits/stdc++.h>
using namespace std;
class UnionFind
{ // OOP style
        private:
            vector<int> p, rank; // remember: vi is vector<int>
     public:


         UnionFind(int N)
                           {
                                    rank.assign(N, 0);
                                    p.assign(N, 0);
                                    for (int i = 0; i < N; i++)
                                    p[i] = i;
                            }


         int findSet(int i)
                            {
                                    return (p[i] == i) ? i : (p[i] = findSet(p[i]));
                            }



        bool isSameSet(int i, int j)
                           {
                                    return findSet(i) == findSet(j);
                            }



        void unionSet(int i, int j)
                            {
                                    if (!isSameSet(i, j))
                                            { // if from different set
                                                    int x = findSet(i), y = findSet(j);
                                                    if (rank[x] > rank[y])
                                                        p[y] = x; // rank keeps the tree short
                                                    else
                                                       {
                                                           p[x] = y;
                                                              if (rank[x] == rank[y])
                                                                     rank[y]++;
                                                       }
                                                   }
                              }
};

int main()
{
  int u,v,w;
  vector < pair< int,pair< int , int > > > edgelist;
  int n,m;
  // total no of vertices and edges
  cin>>n>>m;

  // input
  for(int i=0;i<m;i++)
  {
           cin>>u>>v>>w;
           edgelist.push_back(make_pair(w,make_pair(u,v)));
  }
  sort(edgelist.begin(),edgelist.end());
     /// fordecreasingorder greater<pair< int,pair< int , int > >>();
  // itertor for edge list
  vector < pair < int,pair < int , int > > >::iterator it;
  it = edgelist.begin();

  // for printing the sorted edge list
 /* while(it!=edgelist.end())
  {
     pair< int , pair< int , int> > pi;
     pi = *it;
     cout<<pi.first<<" "<<pi.second.first<<" "<<pi.second.second<<endl;
     it++;
  }*/

  int mst_cost = 0;
   UnionFind uf(n);
   int count = 0;
     while(it!=edgelist.end())
  {
      if(count>=m-1)
        break;
        
     pair< int , pair< int , int> > pi;
     pi = *it;
     if(!uf.isSameSet(pi.second.first,pi.second.second))
     {
          mst_cost += pi.first;
          cout<<pi.second.first<<" "<<pi.second.second<<" "<<pi.first<<endl;
          uf.unionSet(pi.second.first,pi.second.second);
          count++;
     }
     it++;
  }

  cout<<mst_cost<<endl;
}
