// use dfs 
// run dfs to n-1 edge
// and if nth edge leads to the initial vertex then count++

void DFS(bool graph[][V], bool marked[], int n,
               int vert, int start, int &count)
{

    marked[vert] = true;

    if (n == 0) {

        marked[vert] = false;

        if (graph[vert][start])
        {
            count++;
            return;
        } else
            return;
    }

    for (int i = 0; i < V; i++)
        if (!marked[i] && graph[vert][i])
            DFS(graph, marked, n-1, i, start, count);
    marked[vert] = false;
}

int countCycles(bool graph[][V], int n)
{
  
    bool marked[V];
    memset(marked, 0, sizeof(marked));

    int count = 0;
    for (int i = 0; i < V - (n - 1); i++) {
        DFS(graph, marked, n-1, i, i, count);

        marked[i] = true;
    }
 
    return count/2;
}


and in main
countcycle(putgraph,lengthofcycle)







//but if cycle length in 3 and 4 then it will be acheived by more efficient way 
// let length is 4
// select any two vertex and count all the vertex that are rechable via these two vertex
// then nC2
// then add in count
// and count/2 bcaze counting for each cycle will be two times
// if graph is undirected
// use bitset ...